// jsconfig.json
{
  "compilerOptions": {
    "module": "esnext", // 解决 import.meta 错误
    "target": "esnext", // 通常也建议将 target 设置为现代版本
    "moduleResolution": "bundler", // 如果你使用 TypeScript 4.7+，推荐这个，更贴近 Vite/Webpack
                                    // 否则可以尝试 "node"
    "baseUrl": ".", // 路径解析基准
    "paths": {
      "@/*": ["./src/*"] // 解决 @ 别名
    },
    "checkJs": true, // 开启对 JavaScript 文件的类型检查，这是让 .d.ts 生效的关键
    "allowJs": true, // 允许 JavaScript 文件
    "jsx": "preserve", // 如果你使用 Vue SFCs (单文件组件) 或 JSX
    "esModuleInterop": true, // 允许 CommonJS 模块以 ES 模块方式导入
    "allowSyntheticDefaultImports": true, // 允许从没有默认导出的模块中进行默认导入
    "lib": ["esnext", "dom"] // 包含现代 JS (esnext) 和 DOM 环境的类型声明
    // "types": ["vite/client"] // 在 jsconfig 中，通常不需要显式写这个，
                                // 因为 env.d.ts 中通常已经有 <reference types="vite/client" />
  },
  "include": [
    "src/**/*.js", // 包含所有 JS 文件
    "src/**/*.jsx", // 如果有 JSX 文件
    "src/**/*.vue", // 包含 Vue 单文件组件
    "src/**/*.d.ts", // **非常重要**：确保包含所有类型声明文件（包括你为图片创建的）
    "env.d.ts" // **非常重要**：包含你的环境声明文件
  ],
  "exclude": ["node_modules", "dist"]
}